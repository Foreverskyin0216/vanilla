import type { BaseMessage } from '@langchain/core/messages'
import type { AI } from './ai'
import type { Search } from './search'
import type { LongTermMemoryManager } from './memory'

export type AppConfig = {
  ai: AI
  botName: string
  search: Search
  square: SquareStatus
}

export type BotStatus = {
  [key: string]: SquareStatus
}

export type MemberStatus = {
  name: string
  messages: Message[]
}

export type Message = {
  id: string
  content: BaseMessage
}

export type SquareStatus = {
  botId: string
  conversation: BaseMessage[]
  members: { [key: string]: MemberStatus }
  store: LongTermMemoryManager
}

/** Represents a memory vector used for storing content and its corresponding embedding. */
export interface MemoryVector {
  /**
   * The content associated with the vector.
   *
   * This can be any string data, such as text, or labels.
   */
  content: string

  /**
   * The numerical embedding corresponding to the content.
   *
   * The embedding is represented as an array of numbers, typically generated by embedding models.
   */
  embedding: number[]

  /** The unique identifier for the vector. */
  id?: string
}

/** Long-term memory types */
export interface PersonalMemory {
  id: string
  content: string
  category: string
  timestamp: string
  embedding: number[]
}

export interface RelationshipMemory {
  id: string
  content: string
  sentiment: 'positive' | 'negative' | 'neutral'
  timestamp: string
  embedding: number[]
}

export interface EventMemory {
  id: string
  content: string
  participants: string[]
  importance: number
  timestamp: string
  embedding: number[]
}

export interface LongTermMemory {
  personal: {
    [userName: string]: {
      facts: PersonalMemory[]
      traits: PersonalMemory[]
      preferences: PersonalMemory[]
      history: PersonalMemory[]
    }
  }
  relationships: {
    [relationshipKey: string]: {
      userName: string
      botName: string
      interactions: RelationshipMemory[]
      dynamics: RelationshipMemory[]
      milestones: RelationshipMemory[]
    }
  }
  events: EventMemory[]
  preferences: {
    [key: string]: unknown
  }
}

export interface MemorySearchResult {
  type: 'personal' | 'relationship' | 'event'
  category: string
  content: string
  similarity: number
  timestamp: string
  id: string
  sentiment?: 'positive' | 'negative' | 'neutral'
  importance?: number
}

export interface MemoryEvaluation {
  shouldStore: boolean
  personalInfo: Array<{
    content: string
    category: 'facts' | 'traits' | 'preferences' | 'history'
  }>
  sentiment: 'positive' | 'negative' | 'neutral'
  interactionSummary: string
}

/** LangGraph State type for the workflow */
export type GraphState = {
  messages: BaseMessage[]
  reaction: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
  memoryContext: string
  userName: string
  userMessage: string
  toolCallCount: number
}
